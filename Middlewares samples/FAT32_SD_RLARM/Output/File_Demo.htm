<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\File_Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\File_Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Sat Jun 08 14:33:50 2019
<BR><P>
<H3>Maximum Stack Usage =       1024 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cmd_copy &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[187]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[93]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93]">os_error</a><BR>
 <LI><a href="#[50]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">rt_alloc_box</a><BR>
 <LI><a href="#[6a]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">os_idle_demon</a><BR>
 <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[26]">CAN1_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4c]">CAN2_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4d]">CAN2_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4e]">CAN2_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4b]">CAN2_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[22]">DMA1_Channel5_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[23]">DMA1_Channel6_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[24]">DMA1_Channel7_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[44]">DMA2_Channel1_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[45]">DMA2_Channel2_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[46]">DMA2_Channel3_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[47]">DMA2_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[48]">DMA2_Channel5_IRQHandler</a> from dma_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[49]">ETH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4a]">ETH_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[56]">MC0_SPI_SignalEvent</a> from fs_config.o(.text) referenced from fs_config.o(.text)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4f]">OTG_FS_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3c]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[16]">RTC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[80]">SPI1_Control</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7f]">SPI1_GetDataCount</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[81]">SPI1_GetStatus</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from spi_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[79]">SPI1_Initialize</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7b]">SPI1_PowerControl</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7d]">SPI1_Receive</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7c]">SPI1_Send</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7e]">SPI1_Transfer</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7a]">SPI1_Uninitialize</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[89]">SPI3_Control</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[88]">SPI3_GetDataCount</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[8a]">SPI3_GetStatus</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from spi_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[82]">SPI3_Initialize</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[84]">SPI3_PowerControl</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[86]">SPI3_Receive</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[85]">SPI3_Send</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[87]">SPI3_Transfer</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[83]">SPI3_Uninitialize</a> from spi_stm32f10x.o(.text) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[78]">SPIX_GetCapabilities</a> from spi_stm32f10x.o(.text) referenced 2 times from spi_stm32f10x.o(.constdata)
 <LI><a href="#[77]">SPIX_GetVersion</a> from spi_stm32f10x.o(.text) referenced 2 times from spi_stm32f10x.o(.constdata)
 <LI><a href="#[f]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[15]">TAMPER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[42]">TIM6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[92]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[5e]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[5a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[5b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[59]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[5c]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[58]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[57]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[75]">cmd_attrib</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[6c]">cmd_capture</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[76]">cmd_cid</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[6f]">cmd_copy</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[70]">cmd_delete</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[71]">cmd_dir</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[74]">cmd_fill</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[72]">cmd_format</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[73]">cmd_help</a> from file_demo.o(.text) referenced 2 times from file_demo.o(.constdata)
 <LI><a href="#[6e]">cmd_rename</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[6d]">cmd_type</a> from file_demo.o(.text) referenced from file_demo.o(.constdata)
 <LI><a href="#[5d]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[91]">main</a> from file_demo.o(.text) referenced from rtx_conf_cm.o(.data)
 <LI><a href="#[90]">mc0_DevCtrl</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[8b]">mc0_Init</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[8f]">mc0_RdInfo</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[8d]">mc0_RdSect</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[8c]">mc0_UnInit</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[8e]">mc0_WrSect</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[6b]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[6a]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[50]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[51]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[53]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[52]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[5f]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[60]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[61]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[62]">svcKernelSysTick</a> from rt_cmsis.o(i.svcKernelSysTick) referenced from rt_cmsis.o(i.osKernelSysTick)
 <LI><a href="#[63]">svcMutexCreate</a> from rt_cmsis.o(i.svcMutexCreate) referenced from rt_cmsis.o(i.osMutexCreate)
 <LI><a href="#[64]">svcMutexDelete</a> from rt_cmsis.o(i.svcMutexDelete) referenced from rt_cmsis.o(i.osMutexDelete)
 <LI><a href="#[65]">svcMutexRelease</a> from rt_cmsis.o(i.svcMutexRelease) referenced from rt_cmsis.o(i.osMutexRelease)
 <LI><a href="#[66]">svcMutexWait</a> from rt_cmsis.o(i.svcMutexWait) referenced from rt_cmsis.o(i.osMutexWait)
 <LI><a href="#[67]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[68]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[69]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[92]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[98]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[246]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[247]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[248]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9c]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[153]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9e]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[a0]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a4]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a6]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[249]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[24a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[24b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[24c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[24d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[24e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[24f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[250]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[251]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[252]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[253]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[254]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[255]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[256]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[257]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[258]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[259]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[25a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[25b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[25c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[25d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[25e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[25f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[260]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[261]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[262]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[263]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[264]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[99]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[265]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b1]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b3]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[266]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postli_1 &rArr; _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[b7]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; getline &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[161]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[267]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bb]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b6]"></a>_platform_post_lib_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_conf_cm.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postli_1
</UL>

<P><STRONG><a name="[268]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[239]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[269]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[26a]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[26b]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[26c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[91]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = main &rArr; getline &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_filesystem
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_display
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>getline</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, getline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = getline &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_capture
</UL>

<P><STRONG><a name="[e7]"></a>GLCD_Initialize</STRONG> (Thumb, 1472 bytes, Stack size 32 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GLCD_Initialize &rArr; rd_id_man &rArr; spi_tran_man &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_display
</UL>

<P><STRONG><a name="[26d]"></a>GLCD_Uninitialize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, glcd_mcbstm32c.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>GLCD_SetForegroundColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_display
</UL>

<P><STRONG><a name="[e8]"></a>GLCD_SetBackgroundColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_display
</UL>

<P><STRONG><a name="[ea]"></a>GLCD_ClearScreen</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GLCD_ClearScreen &rArr; GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_display
</UL>

<P><STRONG><a name="[eb]"></a>GLCD_SetFont</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_display
</UL>

<P><STRONG><a name="[fb]"></a>GLCD_DrawPixel</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, glcd_mcbstm32c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[fc]"></a>GLCD_DrawHLine</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, glcd_mcbstm32c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRectangle
</UL>

<P><STRONG><a name="[fd]"></a>GLCD_DrawVLine</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, glcd_mcbstm32c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRectangle
</UL>

<P><STRONG><a name="[fe]"></a>GLCD_DrawRectangle</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, glcd_mcbstm32c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
</UL>

<P><STRONG><a name="[ff]"></a>GLCD_DrawChar</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
</UL>

<P><STRONG><a name="[ec]"></a>GLCD_DrawString</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GLCD_DrawString &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_display
</UL>

<P><STRONG><a name="[100]"></a>GLCD_DrawBargraph</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, glcd_mcbstm32c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[101]"></a>GLCD_DrawBitmap</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, glcd_mcbstm32c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[26e]"></a>GLCD_VScroll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, glcd_mcbstm32c.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>GLCD_FrameBufferAccess</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, glcd_mcbstm32c.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>GLCD_FrameBufferAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glcd_mcbstm32c.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[93]"></a>os_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[94]"></a>__user_perthread_libspace</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[95]"></a>_mutex_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[96]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[97]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[10f]"></a>SPI_IRQHandler</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI3_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>ITM_SendChar</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[119]"></a>ITM_ReceiveChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[110]"></a>_sys_open</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[112]"></a>_sys_close</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[114]"></a>_sys_write</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[117]"></a>_sys_read</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_ReceiveChar
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[18b]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[177]"></a>_sys_istty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[11a]"></a>_sys_seek</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[11c]"></a>_sys_flen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[11e]"></a>DMA_ChannelInitialize</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, dma_stm32f10x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[121]"></a>DMA_ChannelUninitialize</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, dma_stm32f10x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[123]"></a>DMA1_Channel1_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>DMA1_Channel2_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>DMA1_Channel3_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>DMA1_Channel4_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>DMA1_Channel5_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>DMA1_Channel6_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>DMA1_Channel7_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>DMA2_Channel1_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>DMA2_Channel2_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>DMA2_Channel3_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>DMA2_Channel4_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>DMA2_Channel5_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dma_stm32f10x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_Event
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_Event
</UL>

<P><STRONG><a name="[f5]"></a>GPIO_PortClock</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, gpio_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PortClock
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[130]"></a>GPIO_GetPortClockState</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, gpio_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_PinConfigure</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, gpio_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPortClockState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[106]"></a>GPIO_AFConfigure</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gpio_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[187]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[271]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>fs_mutex_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>

<P><STRONG><a name="[134]"></a>fs_mutex_acquire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fattrib
</UL>

<P><STRONG><a name="[136]"></a>fs_mutex_release</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fattrib
</UL>

<P><STRONG><a name="[138]"></a>fs_mutex_delete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[1f4]"></a>fs_get_rtos_tick_freq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[13a]"></a>fs_set_rtos_delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_set_rtos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[13c]"></a>fs_get_sys_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>

<P><STRONG><a name="[209]"></a>fs_get_sys_tick_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>

<P><STRONG><a name="[145]"></a>fs_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_config &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[d8]"></a>fdelete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_delete
</UL>

<P><STRONG><a name="[d1]"></a>fflush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fill
</UL>

<P><STRONG><a name="[195]"></a>efs_handle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[1e5]"></a>efs_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[272]"></a>efs_uninit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>efs_mount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[273]"></a>efs_unmount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>efs_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[18d]"></a>efs_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[198]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[19c]"></a>efs_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[18f]"></a>efs_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[191]"></a>efs_flen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[19a]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[1df]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[1f3]"></a>efs_rename</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[19e]"></a>efs_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[274]"></a>efs_analyse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>efs_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[1e3]"></a>efs_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[276]"></a>efs_defrag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>efs_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>fat_jour_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[1cc]"></a>fat_jour_prep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[278]"></a>fsj_set_space</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>fsj_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[279]"></a>fsj_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>elink_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1c3]"></a>elink_dir</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1ce]"></a>elink_cmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[1f0]"></a>elink_insert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[1ea]"></a>elink_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
</UL>

<P><STRONG><a name="[1da]"></a>elink_scan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[27a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_format
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[27b]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = toupper &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_filesystem
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cid
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_attrib
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_delete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_copy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rename
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fill
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_capture
</UL>

<P><STRONG><a name="[d0]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fill
</UL>

<P><STRONG><a name="[c7]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_format
</UL>

<P><STRONG><a name="[14d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[14e]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[14c]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a1]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[9d]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[150]"></a>_printf_longlong_hex</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a3]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9f]"></a>_printf_hex_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[151]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[cf]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fill
</UL>

<P><STRONG><a name="[155]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[dc]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getc &rArr; fgetc &rArr; _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format
</UL>

<P><STRONG><a name="[d2]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = putc &rArr; fputc &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type
</UL>

<P><STRONG><a name="[27c]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[d3]"></a>fgetc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fgetc_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fgetc &rArr; _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[ce]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_copy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fill
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_capture
</UL>

<P><STRONG><a name="[15c]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[147]"></a>$Super$$fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[15f]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[cb]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_copy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fill
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_capture
</UL>

<P><STRONG><a name="[b8]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[162]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[d4]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dir
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rename
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[164]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[27d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[168]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[167]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[281]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[c9]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_copy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rename
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_capture
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[283]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[16a]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[160]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[16e]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[15a]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[163]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[14f]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[57]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[16f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a5]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a7]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[156]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[154]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[58]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[171]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[176]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[173]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[183]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[284]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[285]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[179]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[159]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[174]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[157]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fputc_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputc &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>

<P><STRONG><a name="[ae]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[b0]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[16d]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ab]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[286]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[17e]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a9]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[180]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[181]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[188]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[288]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[289]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[d7]"></a>fread</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, freadfast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_copy
</UL>

<P><STRONG><a name="[175]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[17a]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[bc]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[b2]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[28a]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[14a]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[cd]"></a>fputs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fputs_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputs &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_capture
</UL>

<P><STRONG><a name="[d6]"></a>fwrite</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, fwritefast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_copy
</UL>

<P><STRONG><a name="[186]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[185]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[17f]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[28c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[28e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[113]"></a>__sys_close</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[148]"></a>__sys_ensure</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sys_ensure &rArr; fat_flush &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flush
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[11d]"></a>__sys_flen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[111]"></a>__sys_open</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[118]"></a>__sys_read</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[11b]"></a>__sys_seek</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[115]"></a>__sys_write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[146]"></a>_fdelete</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_mapi.o(i._fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[231]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[152]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[230]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[237]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[22e]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[1bb]"></a>fat_attrib</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, fs_fat.o(i.fat_attrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fat_attrib &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fattrib
</UL>

<P><STRONG><a name="[18c]"></a>fat_close</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, fs_fat.o(i.fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[19d]"></a>fat_delete</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, fs_fat.o(i.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[1c8]"></a>fat_ffind</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, fs_fat.o(i.fat_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fat_ffind &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[190]"></a>fat_flen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.fat_flen))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[18e]"></a>fat_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_fat.o(i.fat_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fat_flush &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[1c9]"></a>fat_format</STRONG> (Thumb, 1240 bytes, Stack size 56 bytes, fs_fat.o(i.fat_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = fat_format &rArr; label_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[1d0]"></a>fat_free</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fs_fat.o(i.fat_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fat_free &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[193]"></a>fat_handle_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_fat.o(i.fat_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fat_handle_get &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[1d1]"></a>fat_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fat_init &rArr; fs_config &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[1d3]"></a>fat_mount</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, fs_fat.o(i.fat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[194]"></a>fat_open</STRONG> (Thumb, 448 bytes, Stack size 72 bytes, fs_fat.o(i.fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[197]"></a>fat_read</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[1d7]"></a>fat_rename</STRONG> (Thumb, 368 bytes, Stack size 136 bytes, fs_fat.o(i.fat_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = fat_rename &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[199]"></a>fat_seek</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[1dc]"></a>fat_vol</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.fat_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fat_vol &rArr; label_read &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
</UL>

<P><STRONG><a name="[1bd]"></a>fat_vol_chk</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fs_fat.o(i.fat_vol_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_attrib
</UL>

<P><STRONG><a name="[19b]"></a>fat_write</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[df]"></a>fattrib</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, fs_mapi.o(i.fattrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fattrib &rArr; fat_attrib &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_attrib
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_attrib
</UL>

<P><STRONG><a name="[d9]"></a>ffind</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, fs_mapi.o(i.ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ffind &rArr; fat_ffind &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strpos
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dir
</UL>

<P><STRONG><a name="[dd]"></a>fformat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mapi.o(i.fformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = fformat &rArr; fat_format &rArr; label_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_format
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format
</UL>

<P><STRONG><a name="[da]"></a>ffree</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mapi.o(i.ffree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ffree &rArr; fat_free &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dir
</UL>

<P><STRONG><a name="[15b]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[ed]"></a>finit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finit &rArr; fat_init &rArr; fs_config &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_filesystem
</UL>

<P><STRONG><a name="[ee]"></a>fmount</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_mapi.o(i.fmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fmount &rArr; fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_filesystem
</UL>

<P><STRONG><a name="[5e]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>frename</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fs_mapi.o(i.frename))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = frename &rArr; fat_rename &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rename
</UL>

<P><STRONG><a name="[192]"></a>fs_drive_id</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fs_common.o(i.fs_drive_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_id
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fattrib
</UL>

<P><STRONG><a name="[1b4]"></a>fs_get_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[e2]"></a>fs_ioc_device_ctrl</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fs_ioc.o(i.fs_ioc_device_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_ioc_device_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cid
</UL>

<P><STRONG><a name="[e0]"></a>fs_ioc_get_id</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fs_ioc.o(i.fs_ioc_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_ioc_get_id &rArr; fs_drive_id
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cid
</UL>

<P><STRONG><a name="[e1]"></a>fs_ioc_lock</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fs_ioc.o(i.fs_ioc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cid
</UL>

<P><STRONG><a name="[e3]"></a>fs_ioc_unlock</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fs_ioc.o(i.fs_ioc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cid
</UL>

<P><STRONG><a name="[210]"></a>fs_mc_lock_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_mc_mci.o(i.fs_mc_lock_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[20c]"></a>fs_mc_read_cd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_mc_spi.o(i.fs_mc_read_cd))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[20d]"></a>fs_mc_read_wp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_mc_spi.o(i.fs_mc_read_wp))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[203]"></a>fs_mc_spi_control_ss</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_mc_spi.o(i.fs_mc_spi_control_ss))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>

<P><STRONG><a name="[1f5]"></a>fs_set_cdrive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_set_cdrive))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[1e0]"></a>fs_strmatch</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_common.o(i.fs_strmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fs_strmatch &rArr; fs_strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[1e1]"></a>fs_strncasecmp</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, fs_common.o(i.fs_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
</UL>

<P><STRONG><a name="[1de]"></a>fs_strpos</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_strpos))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[de]"></a>fvol</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fs_mapi.o(i.fvol))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fvol &rArr; fat_vol &rArr; label_read &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format
</UL>

<P><STRONG><a name="[1a5]"></a>get_u16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1a6]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_common.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[1f6]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[1f8]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[143]"></a>mc_spi_DevCtrl</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, fs_mc_spi.o(i.mc_spi_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mc_spi_DevCtrl &rArr; mc_spi_Init &rArr; mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_read_wp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_read_cd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parse_cid
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_DevCtrl
</UL>

<P><STRONG><a name="[144]"></a>mc_spi_DrvEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_mc_spi.o(i.mc_spi_DrvEvent))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC0_SPI_SignalEvent
</UL>

<P><STRONG><a name="[13e]"></a>mc_spi_Init</STRONG> (Thumb, 898 bytes, Stack size 88 bytes, fs_mc_spi.o(i.mc_spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mc_spi_Init &rArr; mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_spi_control_ss
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_lock_unlock
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_set_speed
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parse_csd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parse_cid
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_Init
</UL>

<P><STRONG><a name="[142]"></a>mc_spi_ReadInfo</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_mc_spi.o(i.mc_spi_ReadInfo))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdInfo
</UL>

<P><STRONG><a name="[140]"></a>mc_spi_ReadSector</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_spi_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc_spi_ReadSector &rArr; mc_read_block &rArr; mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdSect
</UL>

<P><STRONG><a name="[13f]"></a>mc_spi_UnInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fs_mc_spi.o(i.mc_spi_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mc_spi_UnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_UnInit
</UL>

<P><STRONG><a name="[141]"></a>mc_spi_WriteSector</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_spi_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc_spi_WriteSector &rArr; mc_write_block &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_WrSect
</UL>

<P><STRONG><a name="[13b]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>

<P><STRONG><a name="[bd]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[bf]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[13d]"></a>osKernelSysTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>

<P><STRONG><a name="[133]"></a>osMutexCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>

<P><STRONG><a name="[139]"></a>osMutexDelete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexDelete), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_delete
</UL>

<P><STRONG><a name="[137]"></a>osMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
</UL>

<P><STRONG><a name="[135]"></a>osMutexWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexWait))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
</UL>

<P><STRONG><a name="[be]"></a>osThreadCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[6b]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[234]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[c4]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[23f]"></a>os_tick_ovf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_ovf))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[23e]"></a>os_tick_val</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_val))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[50]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[242]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[219]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[21d]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[21f]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[220]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>

<P><STRONG><a name="[222]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[223]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[51]"></a>rt_free_box</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[243]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[21b]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[23c]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[232]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[227]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[1f7]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[240]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[228]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[22a]"></a>rt_mut_delete</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
</UL>

<P><STRONG><a name="[103]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[53]"></a>rt_mut_release</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>rt_mut_wait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1fa]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[1f9]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[21a]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[21e]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[221]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[22b]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>

<P><STRONG><a name="[229]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>

<P><STRONG><a name="[225]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[224]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>

<P><STRONG><a name="[22d]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[22c]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[c0]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[21c]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[22f]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[233]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[c2]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[236]"></a>rt_tsk_create</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[238]"></a>rt_tsk_delete</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[23a]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[102]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[1a7]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_common.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[1a8]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[5f]"></a>svcDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[60]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[61]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[62]"></a>svcKernelSysTick</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcKernelSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_val
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_ovf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelSysTick)
</UL>
<P><STRONG><a name="[23d]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[63]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexCreate)
</UL>
<P><STRONG><a name="[64]"></a>svcMutexDelete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexDelete &rArr; rt_mut_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[65]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[66]"></a>svcMutexWait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexWait)
</UL>
<P><STRONG><a name="[67]"></a>svcThreadCreate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[68]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[69]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[235]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[5a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[db]"></a>get_drive</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cid
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format
</UL>

<P><STRONG><a name="[c8]"></a>get_entry</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_attrib
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_delete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_copy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rename
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fill
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_capture
</UL>

<P><STRONG><a name="[c5]"></a>dot_format</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dot_format &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_dir
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_copy
</UL>

<P><STRONG><a name="[6c]"></a>cmd_capture</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = cmd_capture &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>cmd_fill</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = cmd_fill &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>cmd_type</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = cmd_type &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>cmd_rename</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = cmd_rename &rArr; frename &rArr; fat_rename &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>cmd_copy</STRONG> (Thumb, 302 bytes, Stack size 552 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = cmd_copy &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_format
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>cmd_delete</STRONG> (Thumb, 664 bytes, Stack size 16 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = cmd_delete &rArr; fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>cmd_dir</STRONG> (Thumb, 396 bytes, Stack size 360 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = cmd_dir &rArr; ffind &rArr; fat_ffind &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_format
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>cmd_format</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = cmd_format &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_drive
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_filesystem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>cmd_attrib</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = cmd_attrib &rArr; fattrib &rArr; fat_attrib &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fattrib
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>cmd_cid</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = cmd_cid &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_unlock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_lock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_get_id
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_device_ctrl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_drive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>cmd_help</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cmd_help &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_demo.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>init_display</STRONG> (Thumb, 942 bytes, Stack size 8 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = init_display &rArr; GLCD_Initialize &rArr; rd_id_man &rArr; spi_tran_man &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetForegroundColor
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetFont
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetBackgroundColor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>init_filesystem</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, file_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = init_filesystem &rArr; cmd_format &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>spi_tran_man</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spi_tran_man &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_id_man
</UL>

<P><STRONG><a name="[f6]"></a>wr_cmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawPixel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[f4]"></a>wr_reg</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawPixel
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[f2]"></a>rd_id_man</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rd_id_man &rArr; spi_tran_man &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[f3]"></a>GLCD_SetWindow</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GLCD_SetWindow &rArr; wr_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[f1]"></a>delay_ms</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran_man
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[f7]"></a>spi_tran</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[f8]"></a>wr_dat_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wr_dat_start &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[fa]"></a>wr_dat_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[f9]"></a>wr_dat_only</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, glcd_mcbstm32c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wr_dat_only
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[109]"></a>SPI_PeripheralReset</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[77]"></a>SPIX_GetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> spi_stm32f10x.o(.constdata)
<LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>SPIX_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> spi_stm32f10x.o(.constdata)
<LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>SPI_Initialize</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_Initialize &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Initialize
</UL>

<P><STRONG><a name="[107]"></a>SPI_Uninitialize</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_Uninitialize &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Uninitialize
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Uninitialize
</UL>

<P><STRONG><a name="[108]"></a>SPI_PowerControl</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_PowerControl &rArr; SPI_PeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_PowerControl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_PowerControl
</UL>

<P><STRONG><a name="[10b]"></a>SPI_Send</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Send
</UL>

<P><STRONG><a name="[10c]"></a>SPI_Receive</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Receive
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Receive
</UL>

<P><STRONG><a name="[10d]"></a>SPI_Transfer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Transfer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[10a]"></a>SPI_Control</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_Control &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Control
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Control
</UL>

<P><STRONG><a name="[79]"></a>SPI1_Initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Initialize &rArr; SPI_Initialize &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>SPI1_Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Uninitialize &rArr; SPI_Uninitialize &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>SPI1_PowerControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI1_PowerControl &rArr; SPI_PowerControl &rArr; SPI_PeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>SPI1_Send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI1_Send &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>SPI1_Receive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI1_Receive &rArr; SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>SPI1_Transfer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_Transfer &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>SPI1_GetDataCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>SPI1_Control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI1_Control &rArr; SPI_Control &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>SPI1_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>SPI3_Initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI3_Initialize &rArr; SPI_Initialize &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>SPI3_Uninitialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI3_Uninitialize &rArr; SPI_Uninitialize &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>SPI3_PowerControl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI3_PowerControl &rArr; SPI_PowerControl &rArr; SPI_PeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>SPI3_Send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI3_Send &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>SPI3_Receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI3_Receive &rArr; SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>SPI3_Transfer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI3_Transfer &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>SPI3_GetDataCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>SPI3_Control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI3_Control &rArr; SPI_Control &rArr; GPIO_PinConfigure &rArr; GPIO_PortClock
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>SPI3_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>SPI_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_GetStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetStatus
</UL>

<P><STRONG><a name="[120]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelInitialize
</UL>

<P><STRONG><a name="[122]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelUninitialize
</UL>

<P><STRONG><a name="[11f]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma_stm32f10x.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelInitialize
</UL>

<P><STRONG><a name="[131]"></a>SetSysClockTo72</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8b]"></a>mc0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mc0_Init &rArr; mc_spi_Init &rArr; mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>mc0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mc0_UnInit &rArr; mc_spi_UnInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>mc0_RdSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc0_RdSect &rArr; mc_spi_ReadSector &rArr; mc_read_block &rArr; mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>mc0_WrSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc0_WrSect &rArr; mc_spi_WriteSector &rArr; mc_write_block &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_WriteSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>mc0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>mc0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mc0_DevCtrl &rArr; mc_spi_DevCtrl &rArr; mc_spi_Init &rArr; mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>MC0_SPI_SignalEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DrvEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.text)
</UL>
<P><STRONG><a name="[241]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
</UL>

<P><STRONG><a name="[23b]"></a>rt_ms2tick</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[244]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[245]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[226]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1e4]"></a>fs_component_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fs_mapi.o(i.fs_component_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_component_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_cdrive
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[213]"></a>mc_control_bus_speed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_mc_spi.o(i.mc_control_bus_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mc_control_bus_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_set_speed
</UL>

<P><STRONG><a name="[1fc]"></a>mc_control_lock</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, fs_mc_spi.o(i.mc_control_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc_control_lock &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[1fe]"></a>mc_control_ss</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_control_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_control_ss
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_spi_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[20e]"></a>mc_parse_cid</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, fs_mc_spi.o(i.mc_parse_cid))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[20f]"></a>mc_parse_csd</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_parse_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_parse_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[204]"></a>mc_read_block</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_read_block &rArr; mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wait_busy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadSector
</UL>

<P><STRONG><a name="[205]"></a>mc_read_data</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fs_mc_spi.o(i.mc_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
</UL>

<P><STRONG><a name="[208]"></a>mc_read_ocr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_read_ocr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_read_ocr &rArr; mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[200]"></a>mc_read_response</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fs_mc_spi.o(i.mc_read_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_read_response &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[202]"></a>mc_read_status</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_read_status &rArr; mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_set_speed
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[207]"></a>mc_receive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wait_busy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
</UL>

<P><STRONG><a name="[20a]"></a>mc_send</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
</UL>

<P><STRONG><a name="[20b]"></a>mc_send_cid</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_send_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mc_send_cid &rArr; mc_read_data &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[1ff]"></a>mc_send_command</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_mc_spi.o(i.mc_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[1fd]"></a>mc_set_block_len</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_set_block_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_set_block_len &rArr; mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[211]"></a>mc_spi_set_speed</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_spi_set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_spi_set_speed &rArr; mc_read_status &rArr; mc_send_command &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_bus_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[206]"></a>mc_wait_busy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mc_wait_busy &rArr; mc_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
</UL>

<P><STRONG><a name="[212]"></a>mc_write_block</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_write_block &rArr; mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wait_busy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_WriteSector
</UL>

<P><STRONG><a name="[201]"></a>mc_write_data</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, fs_mc_spi.o(i.mc_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_write_data &rArr; mc_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[19f]"></a>alloc_clus</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[1a0]"></a>alloc_table_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_table_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
</UL>

<P><STRONG><a name="[1a2]"></a>alloc_table_write</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_table_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[1a9]"></a>bs_read</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, fs_fat.o(i.bs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bs_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[1ab]"></a>bs_write</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, fs_fat.o(i.bs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bs_write &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[1a4]"></a>cache_fat</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[215]"></a>char_validate</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, fs_fat.o(i.char_validate))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
</UL>

<P><STRONG><a name="[1af]"></a>clear_clus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[1b0]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[1b2]"></a>create_dot_entries</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, fs_fat.o(i.create_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_dot_entries &rArr; entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1b8]"></a>create_lfn_entry</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, fs_fat.o(i.create_lfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = create_lfn_entry &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1ba]"></a>create_sfn_entry</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_sfn_entry &rArr; entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1b7]"></a>entry_flush</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_fat.o(i.entry_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_flush &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_attrib
</UL>

<P><STRONG><a name="[1e8]"></a>entry_pos_comp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_fat.o(i.entry_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[1b9]"></a>entry_pos_inc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fs_fat.o(i.entry_pos_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_attrib
</UL>

<P><STRONG><a name="[1b3]"></a>entry_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[1e9]"></a>entry_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.entry_type))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[1fb]"></a>fat_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
</UL>

<P><STRONG><a name="[1c0]"></a>file_locked</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, fs_fat.o(i.file_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = file_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_attrib
</UL>

<P><STRONG><a name="[1c2]"></a>find_param</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, fs_fat.o(i.find_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_param
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1b6]"></a>format_date</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fs_fat.o(i.format_date))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[1b5]"></a>format_time</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.format_time))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[1e7]"></a>frec_allocate</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fs_fat.o(i.frec_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1c7]"></a>frec_delete</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fs_fat.o(i.frec_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frec_delete &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1c6]"></a>frec_delete_elink</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat.o(i.frec_delete_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = frec_delete_elink
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1eb]"></a>frec_find</STRONG> (Thumb, 520 bytes, Stack size 88 bytes, fs_fat.o(i.frec_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1f1]"></a>frec_find_elink</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fs_fat.o(i.frec_find_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = frec_find_elink &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1c4]"></a>frec_next</STRONG> (Thumb, 424 bytes, Stack size 128 bytes, fs_fat.o(i.frec_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_char_cnt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1d4]"></a>fsinfo_read</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsinfo_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[1c1]"></a>fsinfo_write</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1a1]"></a>get_EOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[1a3]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[1cf]"></a>get_root_clus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.get_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[1dd]"></a>label_read</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fs_fat.o(i.label_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = label_read &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
</UL>

<P><STRONG><a name="[1cb]"></a>label_write</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_fat.o(i.label_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = label_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[1f2]"></a>lfn_char_cnt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_char_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
</UL>

<P><STRONG><a name="[1db]"></a>link_clus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_fat.o(i.link_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = link_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[1ec]"></a>long_ent_hash</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, fs_fat.o(i.long_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = long_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[1ca]"></a>mbr_write</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, fs_fat.o(i.mbr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbr_write &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[214]"></a>name_analyse</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fs_fat.o(i.name_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_analyse
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[216]"></a>name_basis_gen</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, fs_fat.o(i.name_basis_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_basis_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1d9]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[218]"></a>name_nt_gen</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, fs_fat.o(i.name_nt_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_nt_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[217]"></a>name_strip</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, fs_fat.o(i.name_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1d8]"></a>name_validate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_fat.o(i.name_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = name_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[1d6]"></a>path_create</STRONG> (Thumb, 558 bytes, Stack size 144 bytes, fs_fat.o(i.path_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_nt_gen
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[1be]"></a>path_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs_fat.o(i.path_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = path_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_attrib
</UL>

<P><STRONG><a name="[1bf]"></a>path_open</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fs_fat.o(i.path_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_attrib
</UL>

<P><STRONG><a name="[1bc]"></a>path_validate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs_fat.o(i.path_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = path_validate &rArr; name_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_attrib
</UL>

<P><STRONG><a name="[1d5]"></a>read_cache</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_cache &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[1aa]"></a>read_sector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[1ee]"></a>sfn_extract</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs_fat.o(i.sfn_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfn_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[1ef]"></a>short_ent_hash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = short_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[1ed]"></a>sn_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.sn_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[1c5]"></a>unlink_clus</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fs_fat.o(i.unlink_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = unlink_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1b1]"></a>write_cache</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1ad]"></a>write_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
</UL>

<P><STRONG><a name="[15e]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[16b]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[5b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
